import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

plugins {
    id 'java'
}

group 'com.thelogicmaster'
version '1.0'

repositories {
    mavenLocal()
    maven { url 'https://jitpack.io' }
    mavenCentral()
}

configurations {
    transpiler {
        transitive = false
    }
}

dependencies {
    implementation "com.badlogicgames.gdx:gdx:1.10.0"
    implementation 'com.badlogicgames.gdx-controllers:gdx-controllers-core:2.2.1'
    implementation('com.github.tommyettinger:RegExodus:0.1.13')

    implementation files('libs/gdx-tests.jar')

    // Use latest GitHub commit
    implementation 'com.thelogicmaster.clearwing-vm:runtime:-SNAPSHOT'
    implementation 'com.thelogicmaster:switch-gdx:-SNAPSHOT'
    transpiler 'com.thelogicmaster.clearwing-vm:transpiler:-SNAPSHOT'

    // Use specified release
//    implementation 'com.thelogicmaster.clearwing-vm:runtime:0.1'
//    implementation 'com.thelogicmaster:switch-gdx:0.1'
//    transpiler 'com.thelogicmaster.clearwing-vm:transpiler:0.1'
}

task transpile(dependsOn: 'build') {
    doLast {
        delete "$buildDir/transpiler_input"
        delete "$buildDir/transpiler_output"
        delete "$buildDir/dist"

        copy {
            from sourceSets.main.output
            from { configurations.runtimeClasspath.collect {it.isDirectory() ? it : zipTree(it)} }
            into "$buildDir/transpiler_input"
            exclude "META-INF", "META-INF/**"
//            duplicatesStrategy = 'EXCLUDE' // Todo: Find better way to force switch-gdx to override gdx files
        }

        javaexec {
            main = "-jar"
            args = [
                    "$configurations.transpiler.singleFile.absolutePath",
                    "$buildDir/transpiler_input",
                    "$buildDir/transpiler_output",
                    "$projectDir/switch.json",
                    "com.thelogicmaster.test.SwitchLauncher"
            ]
        }

        copy {
            from ("$buildDir/transpiler_output") {
                include "*.h"
            }
            into "$buildDir/dist/include"
        }

        copy {
            from ("$buildDir/transpiler_output") {
                include "*.c"
                include "*.cpp"
            }
            into "$buildDir/dist/source"
        }

        copy {
            from ("$buildDir/transpiler_output") {
                include "CMakeLists.txt"
                include "Makefile"
                include "*.cmake"
            }
            into "$buildDir/dist"
        }

        copy {
            from ("$buildDir/transpiler_input") {
                exclude "**/*.class"
                exclude "META-INF", "META-INF/**"
                exclude "**/*.gwt.xml"
            }
            into "$buildDir/dist/romfs/classpath"
            includeEmptyDirs = false
        }

        copy {
            from "$projectDir/assets"
            into "$buildDir/dist/romfs"
        }

        copy {
            from ({ zipTree("$projectDir/libs/gdx-tests-lwjgl.jar") }) {
                include "data/**"
                eachFile { fcd ->
                    fcd.relativePath = new RelativePath(true, fcd.relativePath.segments.drop(1))
                }
            }
            into "$buildDir/dist/romfs/data"
        }

        // Patch to avoid compiler bug
        exec {
            environment "expression", "JAVA_BOOLEAN\\W+com_badlogic_gdx_assets_AssetManager_update___R_boolean\\(CODENAME_ONE_THREAD_STATE,\\W+JAVA_OBJECT\\W+__cn1ThisObject\\)\\W+{.*?}"
            environment "replacement", '' +
                    'JAVA_BOOLEAN com_badlogic_gdx_assets_AssetManager_update___R_boolean(CODENAME_ONE_THREAD_STATE, JAVA_OBJECT __cn1ThisObject) {\n' +
                    '    DEFINE_INSTANCE_METHOD_STACK(2, 2, 0, 3091, 172);\n' +
                    '    monitorEnterBlock(threadStateData, __cn1ThisObject);\n' +
                    '    locals[0].data.o = __cn1ThisObject;\n' +
                    '    locals[0].type = CN1_TYPE_OBJECT;\n' +
                    '    volatile int restoreToL516329661cn1_class_id_java_lang_Throwable1;\n' +
                    '    int tryBlockOffsetL516329661cn1_class_id_java_lang_Throwable1;\n' +
                    '    DEFINE_CATCH_BLOCK(catch_L516329661cn1_class_id_java_lang_Throwable1, label_L1486954672, restoreToL516329661cn1_class_id_java_lang_Throwable1);\n\n' +
                    '    tryBlockOffsetL516329661cn1_class_id_java_lang_Throwable1 = threadStateData->tryBlockOffset;\n' +
                    '    BEGIN_TRY(cn1_class_id_java_lang_Throwable, catch_L516329661cn1_class_id_java_lang_Throwable1);\n' +
                    '    restoreToL516329661cn1_class_id_java_lang_Throwable1 = threadStateData->threadObjectStackOffset;\n\n' +
                    '    __CN1_DEBUG_INFO(421);\n' +
                    '    if (get_field_com_badlogic_gdx_utils_Array_size(get_field_com_badlogic_gdx_assets_AssetManager_tasks(__cn1ThisObject)) == 0) {\n' +
                    '        while (1) {\n' +
                    '            __CN1_DEBUG_INFO(423);\n' +
                    '            if (get_field_com_badlogic_gdx_utils_Array_size(get_field_com_badlogic_gdx_assets_AssetManager_loadQueue(__cn1ThisObject)) == 0 ||\n' +
                    '                get_field_com_badlogic_gdx_utils_Array_size(get_field_com_badlogic_gdx_assets_AssetManager_tasks(__cn1ThisObject)) != 0)\n' +
                    '                break;\n' +
                    '            __CN1_DEBUG_INFO(424);\n' +
                    '            com_badlogic_gdx_assets_AssetManager_nextTask__(threadStateData, __cn1ThisObject);\n' +
                    '        }\n' +
                    '        __CN1_DEBUG_INFO(426);\n' +
                    '        if (get_field_com_badlogic_gdx_utils_Array_size(get_field_com_badlogic_gdx_assets_AssetManager_tasks(__cn1ThisObject)) == 0) {\n' +
                    '            END_TRY(2);\n' +
                    '            monitorExitBlock(threadStateData, __cn1ThisObject);\n' +
                    '            releaseForReturnInException(threadStateData, cn1LocalsBeginInThread, methodBlockOffset);\n' +
                    '            return JAVA_TRUE;\n' +
                    '        }\n' +
                    '    }\n' +
                    '    __CN1_DEBUG_INFO(428);\n' +
                    '    int result = com_badlogic_gdx_assets_AssetManager_updateTask___R_boolean(threadStateData, __cn1ThisObject) &&\n' +
                    '                 get_field_com_badlogic_gdx_utils_Array_size(get_field_com_badlogic_gdx_assets_AssetManager_loadQueue(__cn1ThisObject)) == 0 &&\n' +
                    '                 get_field_com_badlogic_gdx_utils_Array_size(get_field_com_badlogic_gdx_assets_AssetManager_tasks(__cn1ThisObject)) == 0;\n' +
                    '    END_TRY(2);\n' +
                    '    monitorExitBlock(threadStateData, __cn1ThisObject);\n' +
                    '    releaseForReturnInException(threadStateData, cn1LocalsBeginInThread, methodBlockOffset);\n' +
                    '    return result;\n\n' +
                    '    label_L1486954672:\n' +
                    '    __CN1_DEBUG_INFO(429);\n' +
                    '    BC_ASTORE(1);\n' +
                    '    __CN1_DEBUG_INFO(430);\n' +
                    '    /* CustomInvoke */com_badlogic_gdx_assets_AssetManager_handleTaskError___java_lang_Throwable(threadStateData, __cn1ThisObject, locals[1].data.o);\n' +
                    '    __CN1_DEBUG_INFO(431);\n' +
                    '    result = get_field_com_badlogic_gdx_utils_Array_size(get_field_com_badlogic_gdx_assets_AssetManager_loadQueue(__cn1ThisObject)) == 0;\n' +
                    '    monitorExitBlock(threadStateData, __cn1ThisObject);\n' +
                    '    releaseForReturnInException(threadStateData, cn1LocalsBeginInThread, methodBlockOffset);\n' +
                    '    return result;\n' +
                    '}'
            if (DefaultNativePlatform.currentOperatingSystem.isWindows()) {
                commandLine 'cmd', '/c', 'perl -pi -e \'BEGIN{undef \$/;} s/$ENV{expression}/$ENV{replacement}/smg\' com_badlogic_gdx_assets_AssetManager.c'
            } else {
                commandLine 'bash', '-c', 'perl -pi -e \'BEGIN{undef \$/;} s/$ENV{expression}/$ENV{replacement}/smg\' com_badlogic_gdx_assets_AssetManager.c'
            }
            workingDir "$buildDir/dist/source"
        }

        // Temporary patch to prevent crash, probably causes memory leaks
        exec {
            environment "expression", 'void\\W+__GC_MARK_com_badlogic_gdx_utils_JsonValue\\(CODENAME_ONE_THREAD_STATE,\\W+JAVA_OBJECT\\W+objToMark,\\W+JAVA_BOOLEAN\\W+force\\)\\W+{.*?}'
            environment "replacement", '' +
                    'void __GC_MARK_com_badlogic_gdx_utils_JsonValue(CODENAME_ONE_THREAD_STATE, JAVA_OBJECT objToMark, JAVA_BOOLEAN force) {\n' +
                    '//    struct obj__com_badlogic_gdx_utils_JsonValue* objInstance = (struct obj__com_badlogic_gdx_utils_JsonValue*)objToMark;\n' +
                    '//    gcMarkObject(threadStateData, objInstance->com_badlogic_gdx_utils_JsonValue_type, force);\n' +
                    '//    gcMarkObject(threadStateData, objInstance->com_badlogic_gdx_utils_JsonValue_stringValue, force);\n' +
                    '//    gcMarkObject(threadStateData, objInstance->com_badlogic_gdx_utils_JsonValue_name, force);\n' +
                    '//    gcMarkObject(threadStateData, objInstance->com_badlogic_gdx_utils_JsonValue_child, force);\n' +
                    '//    gcMarkObject(threadStateData, objInstance->com_badlogic_gdx_utils_JsonValue_parent, force);\n' +
                    '//    gcMarkObject(threadStateData, objInstance->com_badlogic_gdx_utils_JsonValue_next, force);\n' +
                    '//    gcMarkObject(threadStateData, objInstance->com_badlogic_gdx_utils_JsonValue_prev, force);\n' +
                    '//    __GC_MARK_java_lang_Object(threadStateData, objToMark, force);\n' +
                    '}'
            if (DefaultNativePlatform.currentOperatingSystem.isWindows()) {
                commandLine 'cmd', '/c', 'perl -pi -e \'BEGIN{undef \$/;} s/$ENV{expression}/$ENV{replacement}/smg\' com_badlogic_gdx_utils_JsonValue.c'
            } else {
                commandLine 'bash', '-c', 'perl -pi -e \'BEGIN{undef \$/;} s/$ENV{expression}/$ENV{replacement}/smg\' com_badlogic_gdx_utils_JsonValue.c'
            }
            workingDir "$buildDir/dist/source"
        }
    }
}

task run(dependsOn: 'transpile') {
    doLast {
        exec {
            if (DefaultNativePlatform.currentOperatingSystem.isWindows()) {
                commandLine 'cmd', '/c', 'cmake -DCMAKE_BUILD_TYPE=Debug -S . -B build -G Ninja && cmake --build build'
            } else {
                commandLine 'bash', '-c', 'cmake -DCMAKE_BUILD_TYPE=Debug -S . -B build -G Ninja && cmake --build build'
            }
            workingDir "$buildDir/dist"
        }
        exec {
            if (DefaultNativePlatform.currentOperatingSystem.isWindows()) {
                commandLine 'cmd', '/c', './build/dist'
            } else {
                commandLine 'bash', '-c', './build/dist'
            }
            workingDir "$buildDir/dist"
        }
    }
}

task deploy(dependsOn: 'transpile') {
    doLast {
        project.file("$buildDir/dist/build").mkdir()
        exec {
            if (DefaultNativePlatform.currentOperatingSystem.isWindows()) {
                commandLine 'cmd', '/c', 'make -j4'
            } else {
                commandLine 'bash', '-c', 'make -j4'
            }
            workingDir "$buildDir/dist"
        }
        exec {
            if (DefaultNativePlatform.currentOperatingSystem.isWindows()) {
                commandLine 'cmd', '/c', '$DEVKITPRO/tools/bin/nxlink --server ./dist.nro'
            } else {
                commandLine 'bash', '-c', '$DEVKITPRO/tools/bin/nxlink --server ./dist.nro'
            }
            workingDir "$buildDir/dist"
        }
    }
}
