import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

plugins {
    id 'java'
}

group 'com.thelogicmaster'
version '1.0'
def appTitle = 'SwitchGDX Tests'
def appAuthor = 'TheLogicMaster'

repositories {
    mavenLocal()
    maven { url 'https://jitpack.io' }
    mavenCentral()
}

configurations {
    transpiler {
        transitive = false
    }
    switchgdx {
        transitive = false
    }
}

dependencies {
    switchgdx project(':switch-gdx')
    transpiler "com.thelogicmaster.clearwing-vm:transpiler:$clearwingVersion-dev"
    implementation project(':switch-gdx')
    implementation "com.badlogicgames.gdx-controllers:gdx-controllers-core:$gdxControllersVersion"
    implementation "com.badlogicgames.gdx:gdx-freetype:$gdxVersion"
    implementation "com.badlogicgames.gdx:gdx-box2d:$gdxVersion"
    implementation files('libs/gdx-tests.jar')
}

task transpile(dependsOn: 'build') {
    doLast {
        delete "$buildDir/dist"

        var libs = []
        configurations.runtimeClasspath.asList().stream()
                .filter(file -> !file.isDirectory())
                .forEach(file -> libs.add(file.absolutePath))

        javaexec {
            main = "-jar"
            args = ["$configurations.transpiler.singleFile.absolutePath", "--input"] + libs + [
                    "$configurations.switchgdx.singleFile.absolutePath",
                    "$buildDir/classes",
                    "--output", "$buildDir/dist",
                    "--source", "$projectDir/src/main/java",
                    "--config", "$projectDir/switch.json"
            ]
        }

        copy {
            from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
            include "*.cpp", "**/*.cpp"
            include "*.hpp", "**/*.hpp"
            include "*.h", "**/*.h"
            include "*.c", "**/*.c"
            into "$buildDir/dist/src"
            includeEmptyDirs = false
        }

        copy {
            from(configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }) {
                exclude "**/*.class"
                exclude "META-INF", "META-INF/**"
                exclude "**/*.gwt.xml"
                exclude "**.cpp", "**/*.cpp"
                exclude "**.hpp", "**/*.hpp"
                exclude "**.h", "**/*.h"
                exclude "**.c", "**/*.c"
                exclude "switchgdx/**"
            }
            into "$buildDir/dist/romfs/classpath"
            includeEmptyDirs = false
        }

        copy {
            from "$projectDir/assets"
            into "$buildDir/dist/romfs"
        }

        copy {
            from "$projectDir/icon.jpg"
            into "$buildDir/dist"
        }

        copy {
            from({ zipTree("$configurations.switchgdx.singleFile.absolutePath") }) {
                include "switchgdx/project/**"
                eachFile { fcd ->
                    fcd.relativePath = new RelativePath(true, fcd.relativePath.segments.drop(2))
                }
            }
            into "$buildDir/dist"
        }
        delete "$buildDir/dist/switchgdx"

        copy {
            from({ zipTree("$projectDir/libs/gdx-tests-lwjgl3.jar") }) {
                include "data/**"
                eachFile { fcd ->
                    fcd.relativePath = new RelativePath(true, fcd.relativePath.segments.drop(1))
                }
            }
            into "$buildDir/dist/romfs/data"
        }

        exec {
            if (DefaultNativePlatform.currentOperatingSystem.isWindows())
                commandLine 'cmd', '/c', "C:\\msys64\\usr\\bin\\rsync -crh --delete --checksum --exclude '/cmake-build-*' --exclude '/build-*' --exclude '/data' --exclude '/sdmc' --exclude '/.idea' dist/ ${project.name}"
            else
                commandLine 'bash', '-c', "rsync -crh --delete --checksum --exclude '/cmake-build-*' --exclude '/build-*' --exclude '/data' --exclude '/sdmc' --exclude '/.idea' dist/ ${project.name}"
            workingDir "$buildDir"
        }
    }
}
configure(transpile) {
    group "SwitchGDX"
    description = "Run the transpiler to generate the C project code"
}

task run(dependsOn: transpile) {
    doLast {
        exec {
            if (DefaultNativePlatform.currentOperatingSystem.isWindows())
                commandLine 'C:\\msys64\\msys2_shell.cmd', '-mingw64', '-where', "$buildDir${File.separator}${project.name}", '-c',
                        'cmake -DCMAKE_BUILD_TYPE=Debug -S . -B build-run -G Ninja && cmake --build build-run -j8 || sleep 50000'
            else
                commandLine 'bash', '-c', 'cmake -DCMAKE_BUILD_TYPE=Debug -S . -B build-run -G Ninja && cmake --build build-run -j8'
            workingDir "$buildDir${File.separator}${project.name}"
        }
        if (DefaultNativePlatform.currentOperatingSystem.isWindows()) {
            copy { // Todo: Copy only needed
                from "C:\\msys64\\mingw64\\bin"
                include "*.dll"
                into "$buildDir\\${project.name}\\build-run"
            }
        }
        exec {
            if (DefaultNativePlatform.currentOperatingSystem.isWindows())
                commandLine 'cmd', '/c', 'build-run\\SwitchGDX.exe'
            else
                commandLine 'bash', '-c', './build-run/SwitchGDX'
            workingDir "$buildDir${File.separator}${project.name}"
        }
    }
}
configure(run) {
    group "SwitchGDX"
    description = "Run with the SwitchGDX backend on desktop"
}

task nro(dependsOn: transpile) {
    doLast {
        exec {
            if (DefaultNativePlatform.currentOperatingSystem.isWindows())
                commandLine 'C:\\devkitPro\\msys2\\msys2_shell.cmd', '-mingw64', '-where', "$buildDir${File.separator}${project.name}", '-c',
                        'cmake --toolchain DevkitA64Libnx.cmake -B build-switch . && cmake --build build-switch -j8 || sleep 50000'
            else
                commandLine 'bash', '-c', 'cmake --toolchain DevkitA64Libnx.cmake -B build-switch . && cmake --build build-switch -j8'
            workingDir "$buildDir${File.separator}${project.name}"
            environment 'APP_TITLE', appTitle
            environment 'APP_AUTHOR', appAuthor
            environment 'APP_VERSION', version
        }
    }
}
configure(nro) {
    group "SwitchGDX"
    description = "Build a homebrew NRO"
}

task deploy(dependsOn: nro) {
    doLast {
        exec {
            if (DefaultNativePlatform.currentOperatingSystem.isWindows())
                commandLine 'C:\\devkitPro\\msys2\\usr\\bin\\bash', '-c', "/opt/devkitpro/tools/bin/nxlink --server ./build-switch/${project.name}.nro"
            else
                commandLine 'bash', '-c', "\$DEVKITPRO/tools/bin/nxlink --server ./build-switch/${project.name}.nro"
            workingDir "$buildDir${File.separator}${project.name}"
        }
    }
}
configure(deploy) {
    group "SwitchGDX"
    description = "Run with the SwitchGDX backend on Switch via NxLink"
}

task ryujinx(dependsOn: nro) {
    doLast {
        Properties properties = new Properties()
        try {
            properties.load(project.rootProject.file('local.properties').newDataInputStream())
        } catch (FileNotFoundException ignored) {
            throw new Exception('The path to the Ryujinx emulator executable is unset. Set "ryujinxPath" in local.properties file.')
        }
        if (!properties.containsKey('ryujinxPath'))
            throw new Exception('The path to the Ryujinx emulator executable is unset. Set "ryujinxPath" in local.properties file.')
        exec {
            if (DefaultNativePlatform.currentOperatingSystem.isWindows())
                commandLine 'cmd', '/c', "${properties.getProperty("ryujinxPath")} ./build-switch/${project.name}.nro"
            else
                commandLine 'bash', '-c', "${properties.getProperty("ryujinxPath")} ./build-switch/${project.name}.nro"
            workingDir "$buildDir${File.separator}${project.name}"
        }
    }
}
configure(ryujinx) {
    group "SwitchGDX"
    description = "Run with the SwitchGDX backend on Switch via NxLink"
}

task uwp(dependsOn: transpile) {
    doLast {
        exec {
            commandLine 'cmd', '/c', "call uwp.cmd"
            workingDir "$buildDir${File.separator}${project.name}"
        }
    }
}
configure(uwp) {
    group "SwitchGDX"
    description = "Generate the UWP project and open Visual Studio"
}
